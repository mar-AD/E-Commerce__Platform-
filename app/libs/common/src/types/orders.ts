// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.3
//   protoc               v5.27.3
// source: proto/orders.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Timestamp } from "google/protobuf/timestamp";

// export const protobufPackage = "orders";

export enum OrderStatus {
  PENDING = 0,
  CONFIRMED = 1,
  CANCELED = 2,
  SHIPPED = 3,
  UNRECOGNIZED = -1,
}

export interface PaginationRequest {
  page: number;
  limit: number;
}

export interface ProductItem {
  customProductId: string;
  quantity: number;
}

export interface CreateOrder {
  products: ProductItem[];
  totalPrice: number;
}

export interface CreateOrderRequest {
  getUser: GetOrdersByUserIdRequest | undefined;
  createOrderDto: CreateOrder | undefined;
}

export interface OrderResponse {
  id: string;
  userId: string;
  products: ProductItem[];
  totalPrice: number;
  status: OrderStatus;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export interface GetOrderByIdRequest {
  orderId: string;
}

export interface GetOrdersByUserIdRequest {
  userId: string;
}

export interface OrdersListResponse {
  orders: OrderResponse[];
  total: number;
}

export interface UpdateOrder {
  products?: ProductItem[];
  status?: OrderStatus | undefined;
  totalPrice?: number | undefined;
}

export interface UpdateOrderStatusRequest {
  getOrder: GetOrderByIdRequest | undefined;
  getUser: GetOrdersByUserIdRequest | undefined;
  updateOrderDto: UpdateOrder | undefined;
}

export const ORDERS_PACKAGE_NAME = "orders";

export interface OrderServiceClient {
  createOrder(request: CreateOrderRequest): Observable<OrderResponse>;

  getOrderById(request: GetOrderByIdRequest): Observable<OrderResponse>;

  getOrdersByUserId(request: GetOrdersByUserIdRequest): Observable<OrdersListResponse>;

  getAllOrders(request: Observable<PaginationRequest>): Observable<OrdersListResponse>;

  updateOrderStatus(request: UpdateOrderStatusRequest): Observable<OrderResponse>;
}

export interface OrderServiceController {
  createOrder(request: CreateOrderRequest): Promise<OrderResponse> | Observable<OrderResponse> | OrderResponse;

  getOrderById(request: GetOrderByIdRequest): Promise<OrderResponse> | Observable<OrderResponse> | OrderResponse;

  getOrdersByUserId(
    request: GetOrdersByUserIdRequest,
  ): Promise<OrdersListResponse> | Observable<OrdersListResponse> | OrdersListResponse;

  getAllOrders(request: Observable<PaginationRequest>): Observable<OrdersListResponse>;

  updateOrderStatus(
    request: UpdateOrderStatusRequest,
  ): Promise<OrderResponse> | Observable<OrderResponse> | OrderResponse;
}

export function OrderServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createOrder", "getOrderById", "getOrdersByUserId", "updateOrderStatus"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = ["getAllOrders"];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ORDER_SERVICE_NAME = "OrderService";
